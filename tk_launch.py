import os, sys, stat
import string
from xml.dom import minidom
import xml.etree.ElementTree as ET
from tkinter import *
import csv

#Définition de la fonction pour scan le sous-réseau en récupérant l'IP via l'input
def RecupAdSR():
    lst_ipreseau.delete(0,'end')
    #lst_hostname.delete(0,'end') 
    #Création du script nmap_scanreseau.sh
    script_scanSR = open("./Script_sh/nmap_scanreseau.sh", "w")
    #Clear la console
    os.system("clear")
    #Récupération de l'IP du sous-réseau
    adresseSR = input_ipreseau.get()
    #Ecriture du script pour scan le sous-réseau
    script_scanSR.write("nmap -sP -oX ./Resultat_xml/resultat_nmap_scanreseau.xml " + adresseSR)
    #Fermeture du fichier script
    script_scanSR.close()
    #Changement des droits du script
    os.chmod(path_nmap_scanreseau, 0o0777)
    #Lancement du script
    os.system(path_nmap_scanreseau)
    #Changement des droits du fichier résultat
    os.chmod(path_resultat_nmap_scanreseau, 0o0777)
    #Traitement des résultat du fichier XML
    doc = minidom.parse(path_resultat_nmap_scanreseau)
    nb_adresse = doc.getElementsByTagName("address")
    nb_hostname = doc.getElementsByTagName("hostname")
    #Récupération des IP et Hostname
    for i in nb_adresse:
        if i.getAttribute("addrtype") == "ipv4":
            liste_adresse.append(i.getAttribute("addr"))
    #for n in nb_hostname:
    #    liste_hostname.append(n.getAttribute("name"))
    #Affichage des IP avec Hostname à côté
    c = 0
    #w = 0
    while c < len(liste_adresse) : #and c < len(liste_hostname):
        lst_ipreseau.insert(c, liste_adresse[c])
        c = c + 1
    #while w < len(liste_hostname) :
    #    lst_hostname.insert(w, liste_hostname[w])
    #    w = w + 1
   
def ResetIP():
    lst_ipreseau.delete(0,'end')
    #lst_hostname.delete(0,'end')  
    liste_adresse.clear()
    #liste_hostname.clear() 
        
def RecupAdIP():
    lst_ports.delete(0,'end')
    lst_protocol.delete(0,'end')
    lst_services.delete(0,'end')  
    #Création du script nmap_scanports.sh
    script_scanPO = open("./Script_sh/nmap_scanports.sh", "w")
    #Clear la console
    os.system("clear")
    #Recherche de la variable sélectionnée
    for i in lst_ipreseau.curselection():
        global ip_scanport 
        ip_scanport = lst_ipreseau.get(i)
    #Ecriture du script nmap
    script_scanPO.write("sudo nmap -sS -O -oX ./Resultat_xml/resultat_nmap_scanports.xml " + ip_scanport)
    #Fermeture du fichier
    script_scanPO.close()
    #Changement des droits d'accès du script
    os.chmod(path_nmap_scanports, 0o0777)
    #Lancement du script
    os.system(path_nmap_scanports)
    #Changement des droits d'accès aux resultats XML
    os.chmod(path_resultat_nmap_scanports, 0o0777)
    #Traitement des résultat du fichier XML
    doc = minidom.parse(path_resultat_nmap_scanports)
    nb_ports = doc.getElementsByTagName("port")
    nb_service = doc.getElementsByTagName("service")
    nb_os = doc.getElementsByTagName("osmatch")
    #Récupération des os potentiels
    global type_os
    for i in nb_os:
    	liste_os.append(i.getAttribute("name"))
    if not liste_os :
    	type_os = "multi"
    elif "Windows" in liste_os[0]:
    	type_os = "windows"
    elif "Linux" in liste_os[0]:
    	type_os = "linux"
    elif "Mac" in liste_os[0]:
    	type_os = "mac"
    elif "AIX" in liste_os[0]:
    	type_os = "aix"
    elif "Android" in liste_os[0]:
    	type_os = "android"
    elif "BSD" in liste_os[0]:
    	type_os = "bsd"
    elif "BSDi" in liste_os[0]:
    	type_os = "bsdi"
    elif "Cisco" in liste_os[0]:
    	type_os = "cisco"
    elif "Firefox" in liste_os[0]:
    	type_os = "firefox"
    elif "FreeBSD" in liste_os[0]:
    	type_os = "freebsd"
    elif "HP-UX" in liste_os[0]:
    	type_os = "hp-ux"
    elif "Iris" in liste_os[0]:
    	type_os = "iris"
    elif "Java" in liste_os[0]:
    	type_os = "java"
    elif "Javascript" in liste_os[0]:
    	type_os = "javascript"
    elif "mainframe" in liste_os[0]:
    	type_os = "mainframe"
    elif "NetBSD" in liste_os[0]:
    	type_os = "netbsd"
    elif "NetWare" in liste_os[0]:
    	type_os = "netware"
    elif "nodejs" in liste_os[0]:
    	type_os = "nodejs"
    elif "OpenBSD" in liste_os[0]:
    	type_os = "openbsd"
    elif "PHF" in liste_os[0]:
    	type_os = "phf"
    elif "Python" in liste_os[0]:
    	type_os = "python"
    elif "Ruby" in liste_os[0]:
    	type_os = "ruby"
    elif "Solaris" in liste_os[0]:
    	type_os = "solaris"
    elif "Unix" in liste_os[0]:
    	type_os = "unix"
    #Récupération des services
    for i in nb_service:
        liste_service.append(i.getAttribute("name"))
    #Récupération des ports et protocoles
    for i in nb_ports:
        liste_ports.append(i.getAttribute("portid"))
        liste_protocole.append(i.getAttribute("protocol"))
    p=0
    #Affichage des ports/protocole/services
    while p < len(liste_ports) and p < len(liste_service):
        lst_ports.insert(p, liste_ports[p])
        lst_protocol.insert(p, liste_protocole[p])
        lst_services.insert(p, liste_service[p])
        p = p + 1

def ResetPort():
    lst_ports.delete(0,'end')
    lst_protocol.delete(0,'end')
    lst_services.delete(0,'end') 
    liste_service.clear()
    liste_ports.clear()
    liste_protocole.clear() 

def RecupExploit():
    lst_cve.delete(0,'end')
    os.system("clear")
    #Création du script metasploit_scan.sh
    script_scan_metasploit = open("./Script_sh/metasploit_scan.sh", "w")
    #Récupération du port à scan
    for i in lst_ports.curselection():
        global port_scan 
        port_scan = lst_ports.get(i)
    lbl_cve['text'] = "Liste des exploits du port "+port_scan
    #Ecriture du script nmap
    script_scan_metasploit.write('msfconsole -x "search type:exploit platform:'+type_os+' rank:good rank:great rank:excellent port:'+port_scan+' -o '+path_resultat_scan_metasploit+';exit"')
    #Fermeture du fichier
    script_scan_metasploit.close()
    #Changement des droits d'accès du script
    os.chmod(path_scan_metasploit, 0o0777)
    #Lancement du script
    os.system(path_scan_metasploit)
    #Changement des droits du fichier des résultats
    os.chmod(path_resultat_scan_metasploit, 0o0777)
    script_scan_metasploit.close()
    #Ouverture du fichier
    resultat_metasploit = open(path_resultat_scan_metasploit, "r")
    lecteurcsv = csv.reader(resultat_metasploit,delimiter=",")
    for ligne in lecteurcsv:
    	if "exploit" in ligne[1]:
    		liste_cve.append(ligne[1])
    c = 0
    while c < len(liste_cve):
    	lst_cve.insert(c, liste_cve[c])
    	c = c + 1
    resultat_metasploit.close()
    script_scan_metasploit.close()
    
def TestExploit():
    os.system("clear")
    #Récupération du port à scan
    for i in lst_cve.curselection():
        exploit = lst_cve.get(i)
    os.system('msfconsole -x "use '+exploit+';set RHOSTS '+ip_scanport+';set RPORT '+port_scan+';exploit"')
    
def ResetCVE():
    lst_cve.delete(0,'end')
    liste_cve.clear()


#Déclaration des listes des adresses IP et hostname du réseau
liste_adresse = []
#liste_hostname = []

#Déclaration des listes des Ports ouverts et services associés
liste_ports = []
liste_protocole = []
liste_service = []
liste_os = []

#Déclaration liste cve
liste_cve = []

###	Script Scan Réseau
#Déclaration variable du path du script 
path_nmap_scanreseau = "./Script_sh/nmap_scanreseau.sh"
#Déclaration du path des résultat du script au format XML
path_resultat_nmap_scanreseau = "./Resultat_xml/resultat_nmap_scanreseau.xml"

###	Script Scan des Ports ouvers
#Décalaration variable du path du script 
path_nmap_scanports = "./Script_sh/nmap_scanports.sh"
### Déclaration du path des résultat du script au format XML
path_resultat_nmap_scanports = "./Resultat_xml/resultat_nmap_scanports.xml"

###	Script Lancement Metasploit
#Déclaration variable du path du script
path_scan_metasploit = "./Script_sh/metasploit_scan.sh"
#Déclaration du path des résultats du scan
path_resultat_scan_metasploit = "./Resultat_xml/resultat_scan_metasploit.txt"

###	Script Test Exploit
#Création du path du résultat
path_resultat_exploit = "./Resultat_xml/resultat_exploit.txt"

#Création de la fenêtre tkinter
fenetre = Tk()
fenetre.title("Scan Réseau")
fenetre.geometry("700x680")
lbl_ipreseau = Label(fenetre, text="Adresse du réseau à scanner :")
lbl_ipreseau.place(x=3,y=5)
input_ipreseau = Entry(fenetre, textvariable=string, width = 16)
input_ipreseau.place(x=210,y=5)
btn_ipreseau = Button(fenetre, text="Scan Sous-réseau", command=RecupAdSR)
btn_ipreseau.place(x=120, y=35)
btn_reset_scanip = Button(fenetre, width=1, height=1, text="X", command=ResetIP)
btn_reset_scanip.place(x=300,y=35)
lbl_listeipreseau = Label(fenetre, text="Liste des adresses :")
lbl_listeipreseau.place(x=3,y=70)
lst_ipreseau = Listbox(fenetre, width=25 , height=13)
lst_ipreseau.place(x=8,y=95)
#lst_hostname = Listbox(fenetre, width=23, height=13)
#lst_hostname.place(x= 200, y =95)
btn_ipreseau = Button(fenetre, text="Scan Ports Ouverts", command=RecupAdIP)
btn_ipreseau.place(x=120, y=345)
btn_reset_scanports = Button(fenetre, width=1, height=1, text="X", command=ResetPort)
btn_reset_scanports.place(x=300,y=345)
lst_ports = Listbox(fenetre, width=13, height=13)
lst_ports.place(x=5,y=383)
lst_protocol = Listbox(fenetre, width=13 , height=13)
lst_protocol.place(x=117,y=383)
lst_services = Listbox(fenetre, width=20 , height=13)
lst_services.place(x=230,y=383)
btn_cve = Button(fenetre, text="Scan des cve", command=RecupExploit)
btn_cve.place(x=120, y=630)
btn_reset_scanip = Button(fenetre, width=1, height=1, text="X", command=ResetCVE)
btn_reset_scanip.place(x=300,y=630)
lbl_cve = Label(fenetre, text="")
lbl_cve.place(x=400,y=5)
lst_cve = Listbox(fenetre, width=30, height=30)
lst_cve.place(x=420, y=25)
btn_test_exploit = Button(fenetre, text="Test Exploit", command=TestExploit)
btn_test_exploit.place(x=450,y=595)
btn_resultat = Button(fenetre, width=2, height=2, text="", state=DISABLED)
btn_resultat.place(x=600, y=587) 

fenetre.mainloop()
